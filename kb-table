#!/bin/bash

set -efu

cd "$HOME/src/kernel-image"

unset fetch
for opt do
        shift
        case "$opt" in
		--width=*) COLUMNS=${opt#*=} ;;
                --fetch) fetch=y ;;
                --check) pick=check ;;
                --head) show_head=y ;;
		--match=*) pattern=${opt#*=} ;;
		--br=* | --branch=*) branch=${opt#*=} ;;
		--log) show_log=y ;;
		-*) echo >&2 "Unknown option: $opt"; exit 1 ;;
                *) set -- "$@" "$opt";;
        esac
done

V() { echo -e "+ \e[1;33m$*\e[m" >&2; "$@"; }
CR=$'\n'

cb=$(git branch --show-current)
readonly cb
[ -v branch ] || branch=$cb

branches=$(grep -Po '(?<=--branch)\s+\S+' "$HOME/src/kernelbot-bin/kernel-list" | grep -e "${pattern-}")
declare -i branch_width=0
declare -i branch_count=0
for br in $branches; do
	[[ branch_width -gt ${#br} ]] || branch_width=${#br}
	branch_count+=1
done
if [ ! -v COLUMNS ]; then
	if [ -t 1 ]; then
		shopt -s checkwinsize
		date &>/dev/null # External command to trigger checkwinsize to set COLUMNS.
	fi
	[ -v COLUMNS ] || COLUMNS=236
fi
declare -i lead_width=$((COLUMNS - (branch_width + 1) * branch_count - 2))
((lead_width>10)) || lead_width=16
((lead_width<80)) || lead_width=80
declare -i subj_width=lead_width-11 # Without YYYY-MM-DD date.

if ! git diff --quiet ||
   ! git diff --quiet --cached; then
	echo >&2 "Work tree is unclean."
	exit 1
fi

[ -v fetch ] && V git fetch kernelbot '+refs/heads/*:refs/remotes/kernelbot/*' '+refs/notes/*:refs/notes/kernelbot/*'

_atexit() {
	if [ "$cb" != "$(git branch --show-current)" ]; then
		echo >&2 "Exiting..."
		V git switch -q -f "$cb"
	fi
}
trap _atexit 0

printf '%*s:' "$lead_width" "BRANCH"
for br in $branches; do
	[[ $br == "$branch" ]] && echo -ne '\e[1;32m'
	printf ' %*s' "$branch_width" "$br"
	[[ $br == "$branch" ]] && echo -ne '\e[m'
done
echo

if [ -v show_head ]; then
	printf '%*s:' "$lead_width" "HEAD-TAG"
	for br in $branches; do
		# First pristine upstream tag (we forked from).
		tag=$(git describe --candidates=1 --tags --match 'v*.*' --abbrev=0 "$br")
		printf ' %*s' "$branch_width" "$tag"

	done
	echo
fi

declare -A bottom
# Limit rebased branches.
bottom['rt/p10']='gears/rt/p9'

printf '%*s:' "$lead_width" "BOTTOM-TAG"
for br in $branches; do
	# First pristine upstream tag (we forked from).
	if [[ -n ${bottom[$br]-} ]]; then
		tag=${bottom[$br]}
	else
		tag=$(git describe --tags --match 'v*.*' --abbrev=0 --first-parent "$br")
		bottom["$br"]=$tag
	fi
	printf ' %*s' "$branch_width" "$tag"

done
echo

if [[ -z ${bottom[$branch]-} ]]; then
	echo >&2 "Requested branch $branch not found."
	exit 1
fi


printf '%*s:' "$lead_width" "COMMITS"
for br in $branches; do
	tag=${bottom[$br]}
	n=$(git rev-list --first-parent --no-walk --no-merges "$br" "^$tag" | wc -l)
	printf ' %*s' "$branch_width" "$n"

done
echo

while read -r commit; do
	subject=$(git log --format='%s [%an]' -n1 "$commit")
	[[ $subject =~ ^[[:digit:]\.]+-alt[[:digit:]] ]] && continue
	[ -v show_log ] && git l --no-walk "$commit"
	cdate=$(git log --format='%cs' -n1 "$commit")
	printf '%*.*s %s:' "$subj_width" "$subj_width" "$subject" "$cdate"
	for br in $branches; do
		if [[ $br == "$branch" ]]; then
			state="$commit"; hl='0;32'
		else
			cherry=$(git cherry "$br" "$commit" "$commit~")
			picked=$(  echo "$cherry" | grep -c '^- ' ||:)
			unpicked=$(echo "$cherry" | grep -c '^+ ' ||:)
			case "$picked:$unpicked" in
				1:0) state='picked'; hl='1;32' ;;
				0:1) state='no';     hl='1;34' ;;
				0:0) state="exact";  hl='0;32' ;;
				*)   state='?';      hl='1;31' ;;
			esac
			if [[ $state == no ]]; then
				git switch -q -f "$br"
				if git cherry-pick -n "$commit" &>/dev/null; then
					if git diff --cached --quiet; then
						state=redundant; hl='0;36'
					else
						state=clean
					fi
				else
					state=unpickable; hl='1;31'
				fi
				git reset -q --hard
			fi
		fi
		echo -ne "\e[${hl}m"
		printf ' %*s' "$branch_width" "$state"
		echo -ne '\e[m'
	done
	echo
done < <(git rev-list --abbrev-commit --first-parent --no-walk --no-merges "$branch" "^${bottom[$branch]}")
