#!/usr/bin/ruby -Kn
# SPDX-License-Identifier: GPL-2.0-only

require 'fileutils'
require 'getoptlong'
require 'json'

@user = 'kernelbot'

if STDOUT.tty?
  RED   = "\e[1;31m"
  GREEN = "\e[1;32m"
  YELLO = "\e[1;33m"
  BLUE  = "\e[1;34m"
  MAGEN = "\e[1;35m"
  CYAN  = "\e[1;36m"
  NORM  = "\e[m"
else
  RED   = ""
  GREEN = ""
  YELLO = ""
  BLUE  = ""
  MAGEN = ""
  CYAN  = ""
  NORM  = ""
end

GetoptLong.new(
  ['--cache',           GetoptLong::NO_ARGUMENT],
  ['--user',            GetoptLong::REQUIRED_ARGUMENT],
  ['--verbose',         GetoptLong::NO_ARGUMENT],
).each do |opt, arg|
  case opt
  when '--cache'
    @cache = true
  when '--user'
    @user = arg
  when '--verbose'
    @verbose = true
  end
end

CACHE = ENV['HOME'] + '/.cache/list-tasks'
if @cache
  FileUtils.mkdir_p(CACHE)
end

def obsoleted_repo(repo, tag)
  pkgname = tag.sub(/-[^-]+-[^-]+$/, '')
  pkgver  = tag[(pkgname.size + 1)..-1]
  mask = "/ALT/#{repo}/files/x86_64/RPMS/#{pkgname}-*.x86_64.rpm"
  pkgs = Dir.glob(mask).reject {|e| e =~ /-debuginfo|-checkinstall/}
  return nil if pkgs.empty?
  pkginrepopath = pkgs.first
  pkginrepobn   = File.basename(pkginrepopath)
  pkginrepover  = pkginrepobn[(pkgname.size + 1)..-1].sub(/\.x86_64\.rpm$/, '')
  cmp = `rpmvercmp #{pkgver} #{pkginrepover}`.to_i
  #  1: pkgver > pkginrepover
  # -1: pkgver < pkginrepover
end

def obsoleted_task(tag)
  pkgname = tag.sub(/-[^-]+-[^-]+$/, '')
  pkgver  = tag[(pkgname.size + 1)..-1]
  kernellist = @kernellist.reject {|e| !e.start_with?(pkgname + '-')}
  kernellist.map! {|e| e[(pkgname.size + 1)..-1]}
  kernellist.map! {|ver| `rpmvercmp #{pkgver} #{ver}`.to_i }
  kernellist.min
end

def run(cmd)
  filename = CACHE + '/' + cmd.gsub(/\s+/, '_')
  return File.read(filename) if @cache and File.exist?(filename)
  STDERR.puts "#{CYAN}+ #{cmd}#{NORM}" if @verbose
  t = `#{cmd}`
  raise Exception.new($?) unless $?.success?
  File.open(filename, "w") {|f| f.write(t)}
  t
end

tasks = run("ssh girar task ls --brief --user=#{@user}")
@kernellist = []
tasks.split("\n").each do |task|
  id, _ = task.split(' ', 2)
  id.delete_prefix!('#')
  task_info_t = run("ssh girar task show --json #{id}")
  # STDERR.puts  task_info_t
  task_info   = JSON.parse(task_info_t)
  t_kernels   = []
  t_modules   = []
  t_other     = []
  disapprove  = []
  t_obsolete1 = []
  t_obsolete2 = []
  t_repo   = task_info['repo']
  t_state  = task_info["state"]
  t_ok = case t_state
         when "EPERM", "DONE", "TESTED" then true
         else false
         end
  o_time   = task_info['build_time'][/^[^T]*/] rescue 'NEVER'
  subtasks = task_info['subtasks'].clone
  subtasks = [] unless subtasks.is_a?(Hash)
  subtasks.reject! {|k,v| !v['tag_name'] }
  subtasks.each do |sub_id, sub_info|
    dir = sub_info['dir']
    tag = sub_info['tag_name']
    disapprove << sub_info['disapproved_by'].map{|e| e + "(#{sub_id})"} if sub_info['disapproved_by']
    if dir =~ /kernel-image/ || tag =~ /kernel-image/
        t_kernels   << tag
        @kernellist << tag if t_ok
        t_obsolete1 << obsoleted_repo(t_repo, tag)
        t_obsolete2 << obsoleted_task(tag)
    elsif dir =~ /kernel-modules/ || tag =~ /kernel-modules/
        t_modules << tag
    else
        t_other << tag
    end
  end
  if !t_kernels.empty?
    t_text = t_kernels.join(',')
    t_text << " + #{t_modules.size} modules" if !t_modules.empty?
    t_text << " + #{t_other.size} other" if !t_other.empty?
  elsif !subtasks.empty?
    t_combined = t_other + t_modules
    t_text = subtasks.first[1]['dir'].split('/').last + '=' + subtasks.first[1]['tag_name']
    t_text << " + #{t_combined.size - 1} other" if t_other.size > 1
  else
    t_text = "empty"
  end
  t_color = case t_state
            when "EPERM", "DONE", "TESTED" then GREEN
            when "FAILED", "FAILING" then RED
            when "POSTPONED", "AWAITING" then BLUE
            else CYAN
            end
  o_id    = "#{t_color}#{id}#{NORM}"
  o_state = "#{t_color}#{t_state}#{NORM}"
  if t_state == 'BUILDING'
    if task_info['test_only']
      o_state << "/#{BLUE}test#{NORM}"
    else
      o_state << "/#{MAGEN}commit#{NORM}"
    end
  end
  o_info  = ''
  unless disapprove.empty?
    t_approve = disapprove.uniq.join(',')
    o_info << "!#{RED}D:#{t_approve}#{NORM}"
  end
  if t_obsolete1.any?(-1)
    o_info << "!#{RED}O:REPO#{NORM}"
  end
  # if t_obsolete2.any?(-1)
  #   o_info << "!#{MAGEN}O:TASK#{NORM}"
  # end

  puts "#{o_id} #{o_time} #{o_state} #{o_info} #{t_repo} #{t_text}"
end

=begin
 "updated": 1653496159,
 "taskid": 300622,
 "shared": false,
 "fail_early": true,
 "test_only": false,
 "repo": "p8",
 "state": "BUILDING",
 "try": 1,
 "iter": 1,
 "age": 0,
 "build_time": "2022-05-25T16:29:18",

  {"100"=>
    {"dir"=>"/people/kernelbot/packages/kernel-image.git",
     "tag_name"=>"kernel-image-std-def-4.9.315-alt0.M80P.1",
     "tag_id"=>"70f15728f1091ca7b932ad79148c10f15c9d56cd",
     "tag_author"=>"Kernel Bot <kernelbot@altlinux.org>",
     "fetched"=>"2022-05-19T06:08:07",
     "type"=>"repo",
     "approved_by"=>["kernelbot"],
     "pkgname"=>"kernel-image-std-def",
     "userid"=>"kernelbot"},
=end
