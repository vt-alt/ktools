#!/bin/bash
# shellcheck disable=SC2010,SC2155,SC2207,SC2012

export LC_ALL=C
export GREP_COLORS="mt=01;32"
set -eu +f
rroot=/ALT
skip="5.1|c[678].*|fm]1|c9m[12]|c9f1|p[567]|.*armh"

[ "$TERM" = screen ] && export COLORTERM=true
export GUM_SPIN_SHOW_OUTPUT=yes GUM_SPIN_SPINNER=minidot

# Package cache. Try to be mediocrely safe with deletion.
tmp=${TMPDIR:-/tmp}/.list-package
mkdir -p "$tmp"
find "$tmp" -maxdepth 3 -fstype tmpfs -name '*.rpm*' -ctime +1 -delete

branch=Sisyphus arch=x86_64
branches='' arches='' packages=''
all_arch='' lsopts='-ltrd' rpmpeek='' lesser='' logs='' dts=''
pattern='' query='' show_pkg='' srpms='' bat=''
SELECTOR="gum choose --height=$((LINES-5))"
unset show_task aptcache spec logdiff offset sourcerpm resolve
unset summary_task preview
for i; do
	shift
	[ "$i" = s ]        && i=Sisyphus
	[ "$i" = sisyphus ] && i=Sisyphus
	if [ -d "/ALT/$i" ]; then
		branch=$i
		branches+=" $i"
		continue
	fi
	if [ -d "/ALT/$branch/files/$i" ]; then
		arch=$i
		arches+=" $i"
		continue
	fi
	case "$i" in
		--src|--srpm*) srpms=y ;;
		--sourcerpm) sourcerpm=y ;;
		--resolve-src) resolve=src ;;
		--spec) spec=y; srpms=only ;;
		-a|--all-arch*) all_arch=y ;;
		--full-time) lsopts+=" $i" ;;
		-1|--names) lsopts= ;;
		--peek|--rpmpeek) rpmpeek=y; lsopts=; break ;;
		--less) lesser=y; lsopts= ;;
		-[0-9]) offset=$i ;;
		--logdiff) logdiff=log; logtool=logdiff; break ;;
		--logdiff2) logdiff=log; logtool=logdiff2; break ;;
		--log) logs=y ;;
		--dts | --ver*) dts=y ;;
		--summary) dts=y; summary_task=y ;&
		--task) show_task=--brief ;;
		--task-full) show_task= ;;
		-p | --pkg | --packages) show_pkg=y ;;
		--ls) query=-l ;;
		--fzf) SELECTOR='fzf --no-sort --tac --height=~100%' ;;
		--bat) bat=y ;;
		--changelog | --configfiles | --conflicts | --docfiles | --dump | --enhances \
		| --filesbypkg | --info | --last | --obsoletes | --provides \
		| --recommends | --requires | --suggests | --supplements | --scripts \
		| --state | --triggers | --triggerscripts | --lastchange | --list \
		| --qf=* | --queryformat=*)
			query=$i ;;
		-L ) query=--lastchange ;;
		--disttag) query='--qf=%{DISTTAG}' ;;
		--ls=* | --list=*) query=-l; pattern=${i#*=} ;;
		--whatdepends |	--depends | --showpkg | --showsrc | --show | --policy | --pkgnames)
			aptcache=${i#--} ;;
		--grep=*)
			# --grep= also provides 'no match' message.
			pattern=${i#*=} ;;
		-*) echo "No option $i"; exit 1 ;;
		*) packages+=" $i" ;;
	esac
done

[ -z "${branches-}" ] && branches=$(cd $rroot; ls | grep -E -vwe "$skip" | sort -fu)
: "${flavours:=*}"
[ -z "$arches" ] && arches="$arch noarch"

gear_describe()
{
	local tag='' descr=$(gear --describe 2>&1)
	if [ "$descr" = "gear: specsubst directive requires a tag" ]; then
		tag=$(git describe --abbrev=0 --tags --exclude '*debug*')
	elif [ "$descr" = "gear: No specfiles found" ]; then
		tag=$(git tag -l --sort=creatordate '*-alt*' | tail -1)
	fi
	[ -n "$tag" ] && descr=$(gear --describe -t "$tag")
	if [[ "$descr" =~ gear: ]]; then
		echo "Error: $descr"
		exit 1
	fi
	# shellcheck disable=SC2086
	set -- $descr
	NAME=$1
	VERSION=$2
	RELEASE=$3
	export NAME VERSION RELEASE
}

resolver_filter() {
	if [ ! -v resolve ]; then
		cat
		return
	fi
	while read -r a aa; do
		binlist=$rroot/$b/files/list/bin.list
		solve=$(awk "\$1 == \"$a\" {print\$5; exit}" "$binlist")
		if [ -n "$solve" ]; then
			printf '%s %s -> %s\n' "$a" "$aa" "${solve%-*-*.src.rpm}"
		else
			printf '%s %s\n' "$a" "$aa"
		fi
	done
}

packages=${packages# }
if [ -z "$packages" ]; then
	gear_describe
	packages=$NAME
fi

# List package in all branches.
set -f
list=()
for package in $packages; do
	for b in $branches; do
		if [ -n "$all_arch" ]; then
			arches=$(ls "$rroot/$b/files/" | grep -v -e - -e SRPMS -e list)
		fi
		if [ -n "$srpms" ]; then
			r=$rroot/$b/files/SRPMS
			pat="$r/$package-[0-9]*-alt*.src.rpm"
			set +f
			for i in $pat; do
				test -e "$i" || continue
				list+=("$i")
			done
			set -f
			[ "$srpms" != only ] || continue
		fi
		for a in $arches; do
			r=$rroot/$b/files/$a/RPMS
			test -d "$r" || continue
			pat="$r/$package-[0-9]*-alt*.$a.rpm"
			set +f
			for i in $pat; do
				test -e "$i" || continue
				if [ -v sourcerpm ]; then
					# Redirect requests to SOURCERPM.
					srpm=$(rpm -qp "$i" --qf '%{SOURCERPM}')
					r=$rroot/$b/files/SRPMS
					i=$r/$srpm
				fi
				list+=("$i")
			done
			set -f
		done
	done
done
[ ${#list[@]} -gt 0 ] || { echo "No match for '$packages'"; exit 1; }

grab_dts() {
	DISTTAG=$(rpm -qp "$RPM" --qf '%{DISTTAG}')
	if [ "$DISTTAG" == '(none)' ]; then
		BUILDHOST=$(rpm -qp "$RPM" --qf '%{BUILDHOST}')
		REPO=${BUILDHOST##*-}
		REPO=${REPO%.hasher.altlinux.org}
	else
		IFS=+. read -r REPO TASK SUBTASK _ <<< "$DISTTAG"
	fi
	if [[ "$RPM" =~ \.src\.rpm$ ]]; then
		pkgname=$(rpm -qp "$RPM" --qf '%{N}')
	else
		SOURCERPM=$(rpm -qp "$RPM" --qf '%{SOURCERPM}')
		pkgname=${SOURCERPM%-*-*.*.rpm}
	fi
	DTS_FILE="/ALT/repo/$REPO/index/src/${pkgname:0:1}/$pkgname/d-t-s-evr.list"
	DTS_LIST=$(awk 'OFS="\t" {$1=strftime("%Y-%m-%d",$1); print $0}' "$DTS_FILE" | column -t)
	DTS=$DTS_LIST
}

# Download RPM form URL into cache.
cache_rpm() {
	local rpm=$1
	local tmpd=$tmp/$TASK/$SUBTASK
	mkdir -p "$tmpd"
	RPM="$tmpd/$rpm" # output
	if [ ! -e "$RPM" ]; then
		URL+=$rpm
		echo >&2 "$URL"
		gum spin -- curl -sSf "$URL" -o "$RPM-"
		mv "$RPM-" "$RPM"
	fi
	# Also changes ctime, to make file fesh for the cache.
	touch -a "$RPM"
}

# Select one from 'list' (from all branches) and from dts list.
select_one() {
	if [ ${#list[@]} -eq 0 ]; then
		echo >&2 "No match!"
		exit 1
	elif [ ${#list[@]} -eq 1 ]; then
		# No choice.
		# shellcheck disable=SC2128
		RPM=$list
	elif [ -n "$all_arch" ] && [ -n "$show_pkg" ] && [ -z "$dts" ]; then
		# Corner case: we need just some rpm for meta-info.
		# shellcheck disable=SC2128
		RPM=$list
	else
		local default=$(ls -1 "${list[@]}" | grep -i -m1 '/sisyphus/')
		RPM=$(gum choose --header='Select one:' --cursor='-> ' --selected="$default" "${list[@]}")
	fi
	if [ -n "$dts" ]; then
		grab_dts
		export GUM_CHOOSE_SELECTED=$(printf %s "$DTS" | grep -w "${TASK-}")
		if [ -v summary_task ]; then
			preview="girar-summary-task {2}"
		elif [ -v show_task ]; then
			preview="ssh girar task show $show_task {2}"
		fi
		if [ -v preview ]; then
			DTS=$(printf %s "$DTS" | fzf --no-sort --tac --height=~100% \
				--preview-window=60% \
				--preview="$preview")
		else
			DTS=$(printf %s "$DTS" | $SELECTOR)
		fi
		unset preview
		read -r _ TASK SUBTASK _ <<< "$DTS"
		[ "${1-}" = --task ] && return
		# Download requested RPM into cache.
		URL=https://git.altlinux.org/tasks/archive/done/_$((TASK/1024))/$TASK/build/$SUBTASK/$arch/rpms/
		echo >&2 "+ $URL"
		st_rpms=$(gum spin -- curl -sSf "$URL" | sed -En 's/<[^>]*>//gp' | grep -E '^[[:space:]][^[:space:]/]+.rpm\b')
		if [ "${1-}" = --rpms ]; then
			printf '%s\n' "$st_rpms" | column -t
			return
		fi
		if [ "$(printf %s "$st_rpms" | grep -c .)" -gt 1 ]; then
			choice=$(printf %s "$st_rpms" | $SELECTOR) 
		else
			choice=$st_rpms
		fi
		choice=$(printf %s "$choice" | awk '{print$1}')
		cache_rpm "$choice"
	else
		DISTTAG=$(rpm -qp "$RPM" --qf '%{DISTTAG}')
		if [ "$DISTTAG" == '(none)' ]; then
			BUILDHOST=$(rpm -qp "$RPM" --qf '%{BUILDHOST}')
			REPO=${BUILDHOST##*-}
			REPO=${REPO%.hasher.altlinux.org}
		else
			IFS=+. read -r REPO TASK SUBTASK _ <<< "$DISTTAG"
		fi
	fi
}

if [ -n "$rpmpeek" ]; then
	select_one
	if [ -n "$DISTTAG" ]; then
		rpm=${RPM#"$tmp/"}
		[ "$rpm" != "$RPM" ] && rpm=$DISTTAG@$(basename "$RPM")
	fi
	(set -x; rpmpeek -n "$RPM" "$@")
	exit
elif [ -n "$lesser" ]; then
	select_one
	echo >&2 "+ less $RPM"
	echo
	less "$RPM"
	exit
elif [ -n "$bat" ]; then
	select_one
	f=$(rpm -qvlp -- "$RPM" | fzf +s --tac)
	f=${f##* }
	rpmpeek "$RPM" bat "${f#/}"
	exit
elif [ -n "$logs" ]; then
	select_one --task
	{
		url="https://git.altlinux.org/tasks/$TASK/build/$SUBTASK/$arch/log"
		echo >&2 "+ curl $url"
		echo
		curl -sSf -L "$url"
	} |& less
	exit
elif [ -v logdiff ]; then
	select_one --task
	baseurl="https://git.altlinux.org/tasks/$TASK/build/$SUBTASK/$arch"
	log_remote="$tmp/log-remote[$TASK-$SUBTASK-$arch]"
	curl -sSf -L "$baseurl/srpm.log" > "$log_remote"
	sed -i 's/^/00:00:00 /' "$log_remote"
	curl -sSf -L "$baseurl/log"     >> "$log_remote"
	[[ $SELECTOR = *fzf* ]] && offset=
	log_local="$tmp/log-local${offset-}"
	log ${offset--1} > "$log_local"
	for i; do
		sed -Ei "$i" "$log_remote" "$log_local"
	done
	$logtool "$log_remote" "$log_local" | delta
	exit
elif [ -v show_task ]; then
	select_one --task
	(set -x; ssh girar task show $show_task "$TASK")
	exit
elif [ -n "$show_pkg" ]; then
	select_one --rpms
	if [ -z "$dts" ]; then
		SOURCERPM=$(rpm -qp "$RPM" --qf '%{SOURCERPM}')
		srcname=${SOURCERPM%-*-*.src.rpm}
		root=$rroot/$REPO/files
		SRC_LIST=$root/list/src.list
		list=( $(awk -v "R=$root/" "\$1~/^$srcname\$/ {print R\"SRPMS/\"\$3}" "$SRC_LIST") )
		BIN_LIST=$root/list/bin.list
		[ -z "$all_arch" ] && archpat="(${arches//[[:space:]]/|})" || archpat=".*"
		list+=( $(awk -v "R=$root/" "\$5~/^$srcname-[^-]+-[^-]+$/ && \$3~/^$archpat\$/ {print R\$3\"/RPMS/\"\$4}" "$BIN_LIST") )
		# Fallthgrough to the ls'er.
	else
		# Displayed from http by select_one
		exit
	fi
elif [ -n "$query" ]; then
	if [ -n "$dts" ]; then
		select_one
		list=("$RPM")
	fi
	list=( $(printf "%s\n" "${list[@]}" | sort -V) )
	for rpm in "${list[@]}"; do
		prefix=$(basename "$rpm")
		if [ -z "${RPM-}" ]; then
			repo=${rpm%%/files/*}
			repo=${repo##*/}
			prefix=$repo/$prefix
		else
			prefix=$REPO@$prefix
		fi
		rpm -qp "$query" -- "$rpm" |
		resolver_filter |
		if ! sed "s,^,$prefix: ," | grep --color=auto "$pattern"; then
			echo "$prefix: no match"
		fi
	done
	exit
elif [ -v aptcache ]; then
	if [ -n "$dts" ]; then
		select_one
		list=("$RPM")
	fi
	list=( $(printf "%s\n" "${list[@]}" | sort -V) )
	sep=
	for rpm in "${list[@]}"; do
		echo -n "$sep"
		NAME=$(rpm -qp --qf "%{NAME}" "$rpm")
		(set -x; apt-cache "$aptcache" "$NAME") | grep -Ev '^\s{6}'
		sep=$'\n'
	done
	exit
elif [ -n "$dts" ]; then
	# Last resort - just print d-t-s-evr.list
	dts='' select_one
	grab_dts
	printf '%s\n' "- $DTS_FILE" >&2
	printf '%s\n' "$DTS_LIST" |& less
	exit
elif [ -v spec ]; then
	select_one
	specfile=$(rpm -q --qf '[-%{FILEFLAGS:fflags} %{FILENAMES}\n]' -p "$RPM" | grep '^\S*s')
	specfile=${specfile#* }
	rpmpeek "$RPM" cat "$specfile" | view +'set ft=spec' -
	exit
fi
if [ -t 1 ]; then
	HIGHLIGHT=$'sed -E s!/([Ss]isyphus)/!/\e[1;33m\\1\e[m/!'
else
	HIGHLIGHT='cat'
fi
# shellcheck disable=SC2086
ls $lsopts -- "${list[@]}" \
	| sed -E 's/^\S+\s+\S+\s+\S+\s+\S+//' \
	| $HIGHLIGHT \
	| grep -P --color '^|[^-]+-alt[^-]+(?=\.[^.]+(\.src)?\.s?rpm)'

