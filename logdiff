#!/usr/bin/ruby -Kn
# SPDX-License-Identifier: CC0
# Simple log diff tool without much ado

# Condenser function
@s = [
  [/\d+/, '0'],
  [/[\t ]+/, ' '],
  [/ -fdiagnostics-color=always/, ''],
  [/\033\[[0-9;]*[a-zA-Z]/, ''],
  [/^\[?0:0:0\]? /, ''],
  [%r{/usr/src/tmp/rpm-tmp\.\S{4,6}}, '/usr/src/tmp/rpm-tmp.X'],
  [%r{/usr/src/tmp/\S{8}\.ltrans\d\.ltrans.o}, '/usr/src/tmp/X.ltrans0.ltrans.o'],
  [%r{/usr/src/tmp/vm.\S{10}}, '/usr/src/tmp/vm.X'],
  [%r{\b0x[0-9a-f]+\b}, '0x0'],
  [%r{\b(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\b}, 'Jan'],
  [%r{\b(Sun|Mon|Tue|Wed|Thu|Fri|Sat)\b}, 'Sun'],
  [%r{/usr/bin/(sed|grep|mkdir|dd|bzip0|gzip|install|tar|cat|chgrp|chmod|chown|cp|cpio|mv|rm)\b}, '/bin/\1'],
  [%r{/bin/install\b}, '/usr/bin/ginstall'],
  [%r{w0.[lgx]zdio\b}, 'w0.lzdio'],
]

class String
  def ggsub(repls)
    res = self.dup
    repls.each do |re, s|
      res.gsub!(re, s)
    end
    res
  end
end

fa = ARGV.shift
fb = ARGV.shift
puts "diff #{fa} #{fb}"

# Raw lines
a = IO.readlines(fa)
b = IO.readlines(fb)

# Condensed to raw lines
aa = {}
bb = {}
a.each { |line| aa[line.ggsub(@s)] = line }
b.each { |line| bb[line.ggsub(@s)] = line }

=begin
# For debug replace 'a' with 'ca'
ca = []
cb = []
a.each { |line| ca << line.ggsub(@s) }
b.each { |line| cb << line.ggsub(@s) }
=end

# How much condensed lines from A unmatched in BB
def unmatched(a, bb)
  count = 0
  a.each do |x|
    y = x.ggsub(@s)
    break if !a or bb[y]
    count += 1
  end if a
  count
end

ac = bc = 0
while ac < a.size or bc < b.size
  xc = unmatched(a[ac..], bb)
  yc = unmatched(b[bc..], aa)
  if xc > 0 or yc > 0
    puts "@@ -#{ac + 1},#{xc} +#{bc + 1},#{yc} @@"
    a[ac, xc].each { |c| printf('-%s', c) } if xc > 0
    b[bc, yc].each { |c| printf('+%s', c) } if yc > 0
    # Remove duplicated lines (that are already printed).
    a[ac, xc].each { |c| bb[c.ggsub(@s)] = true } if xc > 0
    b[bc, yc].each { |c| aa[c.ggsub(@s)] = true } if yc > 0
  end
  ac += (xc == 0)? 1 : xc
  bc += (yc == 0)? 1 : yc
end
