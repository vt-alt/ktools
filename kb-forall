#!/bin/bash
set -efu

cd "$HOME/src/kernel-image"

fetch=y
list_commits=
push_to_remote=
dryrun=
pattern=
grep_mode=-P
pickedline=
signedoff=
fzf=
commits=
describe=
pick=
tag_grep=
show_tags=
allow_diverged=
all=
stable=
onto=
reset=
grep_args=()
grep_pathspec=()
for opt do
        shift
        case "$opt" in
		--onto=*) onto=${opt#*=} ;;
                --no-fetch) unset fetch ;;
		--list) list_commits=y ;;
		--apply | --pick) pick=apply ;;
		--check) pick=check ;;
		--reset) reset=y ;;
		--push) push_to_remote=y ;;
		--dry | --dry-run) dryrun=-n ;;
		--match=*) pattern=${opt#*=} ;;
		--grep=*) grep_args+=${opt#*=} ;;
		--grep-pathspec=*) grep_pathspec+=${opt#*=} ;;
		-G|-F|-P|-E) grep_mode=$opt ;;
		-x) pickedline=-x ;;
		-s) signedoff=-s ;;
		--fzf) fzf=y ;;
		--no-fzf) fzf=n ;;
		--commits) commits=y ;;
		--describe) describe=y; commits=y ;;
		--tag=*) tag_grep=${opt#*=} ;&
		--tag | --tags) show_tags=tags ;;
		--log ) show_tags=log ;;
		--log-push | --log-unpushed) show_tags=log_push ;;
		--allow-diverged) allow_diverged=y ;;
		--all) all=y ;&
		--stable | --stable-rc) stable=${opt#--} ;;
		-*) echo >&2 "Unknown option: $opt"; exit 1 ;;
                *) set -- "$@" "$opt";;
        esac
done

V() { echo -e "+ \e[1;33m$*\e[m" >&2; "$@"; }
CR=$'\n'

cb=$(git branch --show-current)
readonly cb

mkdir -p .git/kb
listfile=.git/kb/branches
if [ -n "$onto" ]; then
	branches="$onto"
	remote=
	fzf=
elif [ -n "$stable" ]; then
	unset fetch
	branches=$(
		git branch -lr --sort=-creatordate --format='%(refname:short) %(creatordate:relative)' "$stable/*" |
		if [ -n "$all" ]; then
			grep -e "$pattern"
		else
			grep -v -e 'year' -e 'month'
		fi |
		cut -d' ' -f1
	)
	remote=$stable
else
	branches=$(grep -Po '(?<=--branch)\s+\S+' "$HOME/src/kernelbot-bin/kernel-list")
	# For -rc branch add it if we're working on it.
	echo "$branches" | grep -q -wF "$cb" ||
		branches="$cb$CR$branches"
	remote=kernelbot
fi
if [ -z "$onto" ] && [ -z "$fzf" ] && [ -e "$listfile" ]; then
	branches=$(cat "$listfile")
	# shellcheck disable=SC2086
	echo "Using --fzf preselected branches:" $branches
fi

picksfile=.git/kb/picks
if [ "$fzf" = 'n' ]; then
	rm "$listfile"
	fzf=
elif [ -n "$fzf" ]; then
	touch "$picksfile"

	# Add notes from previous runs.
	notefile="$listfile.notes"
	true > "$notefile"
	for br in $branches; do
		rev=$(git rev-parse "$br")
		note=
		for commit in "$@"; do
			info=$(grep -Po "(?<=^$rev $commit ).*" "$picksfile" | tail -1)
			note+=" <${info:-?}>"
		done
		printf '%16s %s\n' "$br" "$note" >> "$notefile"
	done

	branches=$(set -o pipefail; fzf --tac -m < "$notefile" | awk '{print$1}')
	echo "$branches" > "$listfile"
	rm "$notefile"
fi
[ -z "$pattern" ] || branches=$(echo "$branches" | grep "$grep_mode" -e "$pattern")

if [ -z "$branches" ]; then
	echo >&2 "No branches selected, try --fzf, --all, or --stable"
	exit 1
fi
declare -i branch_width=0
for br in $branches; do
	[[ branch_width -gt ${#br} ]] || branch_width=${#br}
done

if ! git diff --quiet ||
   ! git diff --quiet --cached; then
	echo >&2 "Work tree is unclean."
	exit 1
fi

for commit; do
	if ! git rev-parse "$commit" &>/dev/null; then
		echo >&2 "Incomprehensible commitish '$commit'."
		exit 1
	fi
	git log --pretty=format:'%h %ad %s (%an)%d' --date=short --no-walk "$commit"
done

[ -z "$list_commits" ] || exit

# NB: Fetch may clean notes if note's fetch url starts with '+' and local ref
# is same as remote. Same refs also do not allow us to compare and determine if
# notes update is needed. So fetch remote notes into separate ref.
[ -v fetch ] && V git fetch kernelbot '+refs/heads/*:refs/remotes/kernelbot/*' '+refs/notes/*:refs/notes/kernelbot/*'

_atexit() {
	if [ "$cb" != "$(git branch --show-current)" ]; then
		echo >&2 "Exiting..."
		V git switch -q -f "$cb"
	fi
}
trap _atexit 0

# Push (without a force) if we can fast-forward a remote in sync to local branch.
needs_push() {
	local l=${1-"@"} r=${2-"@{u}"}
	git merge-base --is-ancestor "$r" "$l" && ! git merge-base --is-ancestor "$l" "$r"
}

printf '\n== %s ==\n' "$(date)" >>.log

declare -i notes=0
pushes=()
for lbr in $branches; do
	case "$lbr" in
		HEAD | @) lbr=$(git branch --show-current) ;;
       	esac
	if [ -n "$tag_grep" ]; then
		git describe --match='kernel-image-*' --abbrev=0 "$lbr" |
			grep -q "$grep_mode" -e "$tag_grep" || continue
	fi
	[ "$cb" = "$lbr" ] && printf '\e[33m'
	printf ':: %*s ' "$branch_width" "$lbr"
	printf '\e[m'
	if [ -z "$remote" ]; then
		rbr="$(git config "branch.$lbr.remote")/$lbr" || unset rbr
	else
		rbr=$remote/$lbr
	fi
	if [ -e ".git/refs/remotes/$lbr" ]; then
		# Already on remote branch.
		rbr=$lbr
		# Date is useful to know actual staleness of the branch.
		printf '{%s}' "$(git log --no-walk --pretty=%cd --date=short "$lbr")"
	elif ! git show-ref --verify --quiet "refs/heads/$lbr"; then
		echo "- branch does not exist"
		continue
	elif git merge-base --is-ancestor "$rbr" "$lbr"; then
		# local branch is ahead or equal to kernelbot, so
		# kernelbot is not ahead of the local branch.
		if git merge-base --is-ancestor "$lbr" "$rbr"; then
			# In synd with remote.
			printf '='
		else
			cnt=$(git rev-list --count "$rbr..$lbr")
			# Local branch is ahead.
			if [ -n "$reset" ]; then
				printf '<reset:-%s>' "$cnt"
				[ -z "$dryrun" ] &&
				       	git switch -f -q -C "$lbr" "$rbr"
			else
				printf '+%s' "$cnt"
			fi
			unset cnt
		fi
	elif git merge-base --is-ancestor "$lbr" "$rbr"; then
		# kernelbot is ahead of local branch, we should ff
		cnt=$(git rev-list --count "$lbr..$rbr")
		printf '<ff:+%s>' "$cnt"
		git switch -f -q -C "$lbr" "$rbr"
		unset cnt
	elif [ -n "$allow_diverged" ]; then
		printf '<diverged>'
	else
		hl=$'\e'"[1;41m" he=$'\e[m';
		# Diverged or independent branches.
		printf "! ${hl}diverged:${he} %s\n" "$(git branch -v -l "$lbr")"
		continue
	fi

	if [ "$lbr" != "$rbr" ]; then
		# Set upstream for non-remote branches.
		ubr=$(git for-each-ref --format='%(upstream:short)' "refs/heads/$lbr")
		if [ -z "$ubr" ]; then
			printf ' @{u}'
			git branch -q --set-upstream-to "$rbr" "$lbr"
		elif [ "$ubr" != "$rbr" ]; then
			printf ' [remote=%s?]' "$ubr"
		fi
	fi

	rev=$(git rev-parse "$lbr")

	if [ -z "$stable" ]; then
		# Show number of unreleased commits. This is a column even if no output.
		printf ' '
		topmost=$(git describe --match='kernel-image-*' --abbrev=0 "$lbr" 2>/dev/null)
		n=$(git rev-list --first-parent --count "$topmost..$lbr")
		if [ "$n" -ne 0 ]; then
			printf '*%d' "$n"
			nn=$(git log --format=%N "$topmost..$lbr" | grep -c .) &&
				printf ':%d' "$nn"
			unset nn
		fi
		nn=$(git rev-list --count "$topmost..$lbr")
		[ "$n" -eq "$nn" ] || printf '/%d' "$nn"
		unset n nn
	fi

	if [ -v grep_args ]; then
		echo
		git grep "$grep_mode" "${grep_args[@]}" "$lbr" -- "${grep_pathspec[@]}" &&
			echo
		continue
	fi

	list=()
	for commit; do
		limit=$(git rev-list --no-walk "$commit" | tail)~
		n=$(git rev-list --no-walk "$commit" | wc -l)

		cherry=$(git cherry "$lbr" "$commit" "$limit")
		picked=$(  echo "$cherry" | grep -c '^- ' ||:)
		unpicked=$(echo "$cherry" | grep -c '^+ ' ||:)
		case "$picked:$unpicked" in
			0:0)    state=exact; hl='0;32' ;;
			"$n:0") state=picked; hl=32 ;;
			*:0)    state=picked-mismatch-$picked-$n; hl=35 ;;
			"0:$n") state=unpicked; list+=("$commit"); hl=34 ;;
			0:*)    state=unpicked-mismatch-$unpicked-$n; hl=35 ;;
			*)     state=mixed-$picked-$unpicked-$n; hl=35 ;;
		esac
		unset n

		if [ "$state" = picked ] && [ -n "$commits" ]; then
			patchid=$(git show "$commit" | git patch-id)
			target=$(git log -p "$lbr" | git patch-id | grep "${patchid% *}" -m1)
			if [ -z "$describe" ]; then
				state="[${target#* }]"
			else
				state=[$(git describe --contains "${target#* }" 2>/dev/null || echo 'picked')]
			fi
		fi
		hl=$'\e'"[1;${hl}m"
		he=$'\e[m';
		printf ' %s' "$hl$state$he"
		unset hl he

		printf '%s %s %s\n' "$rev" "$commit" "$state" >> "$picksfile"
	done

	if [ -n "$show_tags" ]; then
		tag=$(git tag --points-at "$lbr" "$topmost")
		if [ -n "$tag" ]; then
			desc="[$tag]"
			n=0
		else
			n=$(git rev-list --first-parent "$topmost..$lbr" | wc -l)
			desc="[$n ahead of $topmost]"
		fi
		printf ' %s' "$desc"
		if [[ "$show_tags" =~ log ]]; then
			log_msg='unreleased'
			log_from=$topmost
			if [[ "$show_tags" =~ push ]]; then
				log_msg='unpushed'
				log_from=$rbr
				n=$(git rev-list --first-parent "$log_from..$lbr" | wc -l)
			fi
			if [ "$n" -gt 0 ]; then
				echo " -log-$log_msg-"
				git log --oneline --first-parent "$log_from..$lbr"
			fi
		fi
		unset n log_from log_msg
		# Kludgy.
		if [ ${#list[@]} -eq 0 ]; then
		       echo
		       continue
		fi
	fi

	if [ -n "$pick" ] && [ ${#list[@]} -ne 0 ]; then
		printf ' -> '
		git switch -q -f "$lbr"

		# Reverse need_push.
		if needs_push "@{u}" @; then
			printf 'ff'
			git merge -q --ff-only
			printf '=ok '
		fi

		for commit in "${list[@]}"; do
			newrev=$rev
			if [ "$pick" = "apply" ]; then
				if git cherry-pick $signedoff $pickedline "$commit" >>.log 2>&1; then
					result=$(git rev-parse --short @)
					if git notes list "$commit" &>/dev/null; then
						git notes copy "$commit" @
						result+='+note'
						notes+=1
					fi
					newrev=$(git rev-parse @)
				else
					result=unknown
					if ! git diff --quiet; then
						result=CONFLICT
					elif git diff --cached --quiet; then
						result=empty
					fi
					git cherry-pick --abort 2>/dev/null
				fi
			else
				# Only test.
				if git cherry-pick -n "$commit" >>.log 2>&1; then
					if git diff --cached --quiet ; then
						result=redundant
					else
						result=clean
					fi
				else
					result=FAILURE
				fi
			fi
			printf ' %s' "$result"

			printf '%s %s %s\n' "$newrev" "$commit" "$result" >> "$picksfile"
		done

		if ! git diff --quiet ||
		   ! git diff --quiet --cached; then
			   git reset -q --hard
		fi
	fi

	if [ "$lbr" != "$rbr" ] && needs_push "$lbr" "$rbr"; then
		printf ' | pushable'
		pushes+=("$lbr")
	fi
	printf '\n'
done

lnt=refs/notes/commits
rnt=refs/notes/kernelbot/commits
if needs_push "$lnt" "$rnt"; then
	cnt=$(git rev-list --count "$rnt..$lnt")
	echo ":: $lnt [$cnt] | pushable"
	pushes+=("$lnt")
	unset cnt
fi

if [ -n "$push_to_remote" ] && [ ${#pushes[@]} -ne 0 ]; then
	V git push $dryrun "$remote" "${pushes[@]}"
fi

if [ "$cb" != "$(git branch --show-current)" ]; then
	V git switch -q "$cb"
fi
